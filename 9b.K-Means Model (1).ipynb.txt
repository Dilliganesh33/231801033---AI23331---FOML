{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "653e6875-cd6a-447c-97d5-7a8c4de578fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from math import sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ddc644d-8e38-45d5-a3a7-c88fe8351b06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
      "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
      "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
      "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
      "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
      "4   5            5.0           3.6            1.4           0.2  Iris-setosa\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('Iris.csv')\n",
    "print(data.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b73e168e-82cc-4b8b-8ba1-5f0ce9f3ddf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm          Species\n",
      "115            6.4           3.2            5.3           2.3   Iris-virginica\n",
      "142            5.8           2.7            5.1           1.9   Iris-virginica\n",
      "8              4.4           2.9            1.4           0.2      Iris-setosa\n",
      "56             6.3           3.3            4.7           1.6  Iris-versicolor\n",
      "5              5.4           3.9            1.7           0.4      Iris-setosa\n"
     ]
    }
   ],
   "source": [
    "req_data = data.iloc[:, 1:]\n",
    "shuffle_index = np.random.permutation(req_data.shape[0])\n",
    "req_data = req_data.iloc[shuffle_index]\n",
    "print(req_data.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ab187101-ff97-4fb3-bc27-7af2b2f8a49b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train_Shape:  (105, 5)\n",
      "Test_Shape:  (45, 5)\n"
     ]
    }
   ],
   "source": [
    "train_size = int(req_data.shape[0] * 0.7)\n",
    "train_df = req_data.iloc[:train_size, :]\n",
    "test_df = req_data.iloc[train_size:, :]\n",
    "train = train_df.values\n",
    "test = test_df.values\n",
    "y_true = test[:, -1]\n",
    "print('Train_Shape: ', train_df.shape)\n",
    "print('Test_Shape: ', test_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0143d20f-d92a-4570-b6fe-5f5918af2f1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def euclidean_distance(x_test, x_train):\n",
    "    distance = 0\n",
    "    for i in range(len(x_test) - 1):\n",
    "        distance += (x_test[i] - x_train[i]) ** 2\n",
    "    return sqrt(distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d9a5f569-edfb-421e-a3d6-6216bbaa95f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_neighbors(x_test, x_train, num_neighbors):\n",
    "    distances = []\n",
    "    data = []\n",
    "    for i in x_train:\n",
    "        distances.append(euclidean_distance(x_test, i))\n",
    "        data.append(i)\n",
    "    distances = np.array(distances)\n",
    "    data = np.array(data)\n",
    "    sort_indexes = distances.argsort()\n",
    "    data = data[sort_indexes]\n",
    "    return data[:num_neighbors]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f58ed54c-d7c7-4983-becb-088eef675557",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction(x_test, x_train, num_neighbors):\n",
    "    classes = []\n",
    "    neighbors = get_neighbors(x_test, x_train, num_neighbors)\n",
    "    for i in neighbors:\n",
    "        classes.append(i[-1])\n",
    "    predicted = max(classes, key=classes.count)\n",
    "    return predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a3824873-4891-4745-9512-9c023193382c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def accuracy(y_true, y_pred):\n",
    "    num_correct = 0\n",
    "    for i in range(len(y_true)):\n",
    "        if y_true[i] == y_pred[i]:\n",
    "            num_correct += 1\n",
    "    return num_correct / len(y_true)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "24aa4920-bf81-4be3-a9ab-629de1fe0038",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = []\n",
    "for i in test:\n",
    "    y_pred.append(prediction(i, train, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e1b6eecb-9481-4632-8dc3-3182b6d6e55e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9777777777777777\n"
     ]
    }
   ],
   "source": [
    "acc = accuracy(y_true, y_pred)\n",
    "print(f'Accuracy: {acc}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e7da045b-d0cb-4689-85f3-46c1f3429efc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>6.4</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>6.2</td>\n",
       "      <td>2.9</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>Iris-versicolor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>5.8</td>\n",
       "      <td>2.7</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Iris-versicolor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>7.4</td>\n",
       "      <td>2.8</td>\n",
       "      <td>6.1</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>4.4</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm          Species\n",
       "137            6.4           3.1            5.5           1.8   Iris-virginica\n",
       "97             6.2           2.9            4.3           1.3  Iris-versicolor\n",
       "82             5.8           2.7            3.9           1.2  Iris-versicolor\n",
       "130            7.4           2.8            6.1           1.9   Iris-virginica\n",
       "42             4.4           3.2            1.3           0.2      Iris-setosa"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f2f1943-9ec4-43ba-8b39-55f7dcacf6d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
